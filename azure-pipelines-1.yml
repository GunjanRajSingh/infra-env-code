trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

parameters:
  - name: enviroment
    displayName: ENVIRONMENT
    type: string
    default: dev
    values:
      - dev
      - prod

variables:
  # Service connections
  - name: dev_svc
    value: 'dev-conn-svc'
  - name: prod_svc
    value: 'prod-conn-svc'

  - name: selected_svc
    ${{ if eq(parameters.enviroment, 'prod') }}:
      value: 'prod-conn-svc'
    ${{ else }}:
      value: 'dev-conn-svc'

  # Backend Storage Account
  - name: dev_backend
    value: 'gunjandevstg22561'
  - name: prod_backend
    value: 'gunjanprodstg9515'

  - name: select_backend
    ${{ if eq(parameters.enviroment, 'prod') }}:
      value: 'gunjanprodstg9515'
    ${{ else }}:
      value: 'gunjandevstg22561'

  # Container
  - name: dev_cont
    value: 'gunjandevcontainer'
  - name: prod_cont
    value: 'gunjanprodcontainer'

  - name: select_container
    ${{ if eq(parameters.enviroment, 'prod') }}:
      value: 'gunjanprodcontainer'
    ${{ else }}:
      value: 'gunjandevcontainer'





stages:
  - stage: terraforminit
    displayName: TERRAFORM INIT
    jobs:
      - job: InitJob
        displayName: "Init Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: '$(select_backend)'
              backendAzureRmContainerName: '$(select_container)'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'

  - stage: terraformplan
    displayName: TERRAFORM PLAN
    dependsOn: terraforminit
    jobs:
      - job: TerraformPlan
        displayName: "Terraform Plan Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: '$(select_backend)'
              backendAzureRmContainerName: '$(select_container)'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              environmentServiceNameAzureRM: '$(selected_svc)'

  - stage: terraformapply
    displayName: TERRAFORM APPLY
    dependsOn: terraformplan
    jobs:
      - job: TerraformApply
        displayName: "Terraform Apply Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: '$(select_backend)'
              backendAzureRmContainerName: '$(select_container)'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              environmentServiceNameAzureRM: '$(selected_svc)'
