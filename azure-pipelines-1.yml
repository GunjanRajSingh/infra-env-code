parameters:
  - name: environment
    displayName: "Select Environment"
    type: string
    default: dev
    values:
      - dev
      - prod

variables:
  dev_service_connection: "dev-svc-todo"
  dev_storage_account: "devtodo"
  dev_container: "todo-dev-cont"

  prod_service_connection: "todo-svc-prod"
  prod_storage_account: "azurepipeline123"
  prod_container: "azure"

stages:
  - stage: terraform_init
    displayName: "Terraform Init"
    jobs:
      - job: init
        steps:
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.environment }}'
              backendServiceArm: ${{ parameters.environment == 'dev' && variables.dev_service_connection || variables.prod_service_connection }}
              backendAzureRmStorageAccountName: ${{ parameters.environment == 'dev' && variables.dev_storage_account || variables.prod_storage_account }}
              backendAzureRmContainerName: ${{ parameters.environment == 'dev' && variables.dev_container || variables.prod_container }}
              backendAzureRmKey: '${{ parameters.environment }}.tfstate'

  - stage: terraform_plan
    displayName: "Terraform Plan"
    jobs:
      - job: plan
        steps:
          
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.environment }}'
              backendServiceArm: ${{ parameters.environment == 'dev' && variables.dev_service_connection || variables.prod_service_connection }}
              backendAzureRmStorageAccountName: ${{ parameters.environment == 'dev' && variables.dev_storage_account || variables.prod_storage_account }}
              backendAzureRmContainerName: ${{ parameters.environment == 'dev' && variables.dev_container || variables.prod_container }}
              backendAzureRmKey: '${{ parameters.environment }}.tfstate'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.environment }}'
              environmentServiceNameAzureRM: ${{ parameters.environment == 'dev' && variables.dev_service_connection || variables.prod_service_connection }}

  - stage: terraform_apply
    displayName: "Terraform Apply"
    jobs:
      - job: apply
        steps:
          
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.environment }}'
              backendServiceArm: ${{ parameters.environment == 'dev' && variables.dev_service_connection || variables.prod_service_connection }}
              backendAzureRmStorageAccountName: ${{ parameters.environment == 'dev' && variables.dev_storage_account || variables.prod_storage_account }}
              backendAzureRmContainerName: ${{ parameters.environment == 'dev' && variables.dev_container || variables.prod_container }}
              backendAzureRmKey: '${{ parameters.environment }}.tfstate'

          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.environment }}'
              environmentServiceNameAzureRM: ${{ parameters.environment == 'dev' && variables.dev_service_connection || variables.prod_service_connection }}
