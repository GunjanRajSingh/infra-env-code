parameters:
  - name: enviroment
    displayName: ENVIROMENT
    type: string
    default: dev
    values:
      - dev
      - prod

variables:
  - name: dev_svc
    value: 'dev-svc-todo'
  - name: prod_svc
    value: 'todo-svc-prod'
  - name: selected_svc
    ${{ if eq(parameters.enviroment, 'prod') }}:
      value: 'todo-svc-prod'
    ${{ if ne(parameters.enviroment, 'prod') }}:
      value: 'dev-svc-todo'

pool:
  name: test-pool

trigger: none

stages:
  - stage: terraforminit
    displayName: TERRAFORM INIT
    jobs:
      - job: InitJob
        displayName: "Init Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: 'azurepipeline123'
              backendAzureRmContainerName: 'azure'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'

  - stage: terraformplan
    displayName: TERRAFORM PLAN
    jobs:
      - job: terraformplan
        displayName: "Terraform Plan Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: 'azurepipeline123'
              backendAzureRmContainerName: 'azure'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              environmentServiceNameAzureRM: '$(selected_svc)'

  - stage: terraformapply
    displayName: TERRAFORM APPLY
    jobs:
      - job: terraformapply
        displayName: "Terraform Apply Job"
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              backendServiceArm: '$(selected_svc)'
              backendAzureRmStorageAccountName: 'azurepipeline123'
              backendAzureRmContainerName: 'azure'
              backendAzureRmKey: '${{ parameters.enviroment }}.terraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/env/${{ parameters.enviroment }}'
              environmentServiceNameAzureRM: '$(selected_svc)'
